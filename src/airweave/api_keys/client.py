# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..types.api_key import ApiKey
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper


class ApiKeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def read_api_key(self, id: str, *, creds: str, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Retrieve an API key by ID.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        creds : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.api_keys.read_api_key(
            id="id",
            creds="creds",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api-keys/{jsonable_encoder(id)}",
            method="GET",
            params={
                "creds": creds,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApiKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def read_api_key(
        self, id: str, *, creds: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ApiKey:
        """
        Retrieve an API key by ID.

        Args:
        ----
            db (AsyncSession): The database session.
            id (UUID): The ID of the API key.
            user (schemas.User): The current user.

        Returns:
        -------
            schemas.APIKey: The API key object.

        Raises:
        ------
            HTTPException: If the API key is not found.

        Parameters
        ----------
        id : str

        creds : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.api_keys.read_api_key(
                id="id",
                creds="creds",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api-keys/{jsonable_encoder(id)}",
            method="GET",
            params={
                "creds": creds,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ApiKey,
                    parse_obj_as(
                        type_=ApiKey,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
