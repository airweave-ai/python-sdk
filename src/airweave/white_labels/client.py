# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.white_label import WhiteLabel
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..types.source_connection_list_item import SourceConnectionListItem
from ..types.source_connection_create import SourceConnectionCreate
from ..types.source_connection import SourceConnection
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WhiteLabelsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_white_labels(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[WhiteLabel]:
        """
        List all white labels for the current user's organization.

        Args:
        -----
            db: The database session
            current_user: The current user

        Returns:
        --------
            list[schemas.WhiteLabel]: A list of white labels

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WhiteLabel]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.list_white_labels()
        """
        _response = self._client_wrapper.httpx_client.request(
            "white-labels/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[WhiteLabel],
                    parse_obj_as(
                        type_=typing.List[WhiteLabel],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_white_label(
        self,
        *,
        name: str,
        source_short_name: str,
        redirect_url: str,
        client_id: str,
        client_secret: str,
        allowed_origins: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WhiteLabel:
        """
        Create new white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_in: The white label to create

        Returns:
        --------
            white_label (schemas.WhiteLabel): The created white label

        Parameters
        ----------
        name : str

        source_short_name : str

        redirect_url : str

        client_id : str

        client_secret : str

        allowed_origins : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.create_white_label(
            name="Company Slack Integration",
            source_short_name="slack",
            redirect_url="https://yourapp.com/auth/slack/callback",
            client_id="1234567890.1234567890123",
            client_secret="abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins="https://yourapp.com,https://app.yourapp.com",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "white-labels",
            method="POST",
            json={
                "name": name,
                "source_short_name": source_short_name,
                "redirect_url": redirect_url,
                "client_id": client_id,
                "client_secret": client_secret,
                "allowed_origins": allowed_origins,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_white_label(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WhiteLabel:
        """
        Get a specific white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label to get
            current_user: The current user

        Returns:
        --------
            white_label (schemas.WhiteLabel): The white label

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.get_white_label(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_white_label(
        self,
        white_label_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        redirect_url: typing.Optional[str] = OMIT,
        client_id: typing.Optional[str] = OMIT,
        client_secret: typing.Optional[str] = OMIT,
        allowed_origins: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WhiteLabel:
        """
        Update a white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_id: The ID of the white label to update
            white_label_in: The white label to update

        Returns:
        --------
            white_label (schemas.WhiteLabel): The updated white label

        Parameters
        ----------
        white_label_id : str

        name : typing.Optional[str]

        redirect_url : typing.Optional[str]

        client_id : typing.Optional[str]

        client_secret : typing.Optional[str]

        allowed_origins : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.update_white_label(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="PUT",
            json={
                "name": name,
                "redirect_url": redirect_url,
                "client_id": client_id,
                "client_secret": client_secret,
                "allowed_origins": allowed_origins,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_white_label(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WhiteLabel:
        """
        Delete a white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_id: The ID of the white label to delete

        Returns:
        --------
            white_label (schemas.WhiteLabel): The deleted white label

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.delete_white_label(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_white_label_oauth_2_auth_url_white_labels_white_label_id_oauth_2_auth_url_options(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Generate the OAuth2 authorization URL by delegating to oauth2_service.

        Args:
        -----
            request: The HTTP request
            response: The HTTP response
            db: The database session
            white_label_id: The ID of the white label to get the auth URL for
            user: The current user

        Returns:
        --------
            str: The OAuth2 authorization URL

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.get_white_label_oauth_2_auth_url_white_labels_white_label_id_oauth_2_auth_url_options(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/oauth2/auth_url",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_white_label_source_connections(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SourceConnectionListItem]:
        """
        List all source connections for a specific white label.

        Args:
        -----
            white_label_id: The ID of the white label to list source connections for
            db: The database session
            current_user: The current user

        Returns:
        --------
            list[schemas.SourceConnectionListItem]: A list of source connections

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.list_white_label_source_connections(
            white_label_id="white_label_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/source-connections",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SourceConnectionListItem],
                    parse_obj_as(
                        type_=typing.List[SourceConnectionListItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def exchange_white_label_oauth_2_code_white_labels_white_label_id_oauth_2_code_options(
        self,
        white_label_id: str,
        *,
        code: str,
        source_connection_in: typing.Optional[SourceConnectionCreate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Exchange OAuth2 code for tokens and create connection with source connection.

        Args:
        -----
            request: The HTTP request
            response: The HTTP response
            white_label_id: The ID of the white label to exchange the code for
            code: The OAuth2 code
            source_connection_in: Optional source connection configuration
            db: The database session
            user: The current user
            background_tasks: Background tasks for async operations

        Returns:
        --------
            source_connection (schemas.SourceConnection): The created source connection

        Parameters
        ----------
        white_label_id : str

        code : str

        source_connection_in : typing.Optional[SourceConnectionCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.white_labels.exchange_white_label_oauth_2_code_white_labels_white_label_id_oauth_2_code_options(
            white_label_id="white_label_id",
            code="code",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/oauth2/code",
            method="POST",
            json={
                "code": code,
                "source_connection_in": convert_and_respect_annotation_metadata(
                    object_=source_connection_in, annotation=SourceConnectionCreate, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SourceConnection,
                    parse_obj_as(
                        type_=SourceConnection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWhiteLabelsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_white_labels(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[WhiteLabel]:
        """
        List all white labels for the current user's organization.

        Args:
        -----
            db: The database session
            current_user: The current user

        Returns:
        --------
            list[schemas.WhiteLabel]: A list of white labels

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[WhiteLabel]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.list_white_labels()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "white-labels/list",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[WhiteLabel],
                    parse_obj_as(
                        type_=typing.List[WhiteLabel],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_white_label(
        self,
        *,
        name: str,
        source_short_name: str,
        redirect_url: str,
        client_id: str,
        client_secret: str,
        allowed_origins: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WhiteLabel:
        """
        Create new white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_in: The white label to create

        Returns:
        --------
            white_label (schemas.WhiteLabel): The created white label

        Parameters
        ----------
        name : str

        source_short_name : str

        redirect_url : str

        client_id : str

        client_secret : str

        allowed_origins : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.create_white_label(
                name="Company Slack Integration",
                source_short_name="slack",
                redirect_url="https://yourapp.com/auth/slack/callback",
                client_id="1234567890.1234567890123",
                client_secret="abcdefghijklmnopqrstuvwxyz123456",
                allowed_origins="https://yourapp.com,https://app.yourapp.com",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "white-labels",
            method="POST",
            json={
                "name": name,
                "source_short_name": source_short_name,
                "redirect_url": redirect_url,
                "client_id": client_id,
                "client_secret": client_secret,
                "allowed_origins": allowed_origins,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_white_label(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WhiteLabel:
        """
        Get a specific white label integration.

        Args:
        -----
            db: The database session
            white_label_id: The ID of the white label to get
            current_user: The current user

        Returns:
        --------
            white_label (schemas.WhiteLabel): The white label

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.get_white_label(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_white_label(
        self,
        white_label_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        redirect_url: typing.Optional[str] = OMIT,
        client_id: typing.Optional[str] = OMIT,
        client_secret: typing.Optional[str] = OMIT,
        allowed_origins: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WhiteLabel:
        """
        Update a white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_id: The ID of the white label to update
            white_label_in: The white label to update

        Returns:
        --------
            white_label (schemas.WhiteLabel): The updated white label

        Parameters
        ----------
        white_label_id : str

        name : typing.Optional[str]

        redirect_url : typing.Optional[str]

        client_id : typing.Optional[str]

        client_secret : typing.Optional[str]

        allowed_origins : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.update_white_label(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="PUT",
            json={
                "name": name,
                "redirect_url": redirect_url,
                "client_id": client_id,
                "client_secret": client_secret,
                "allowed_origins": allowed_origins,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_white_label(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WhiteLabel:
        """
        Delete a white label integration.

        Args:
        -----
            db: The database session
            current_user: The current user
            white_label_id: The ID of the white label to delete

        Returns:
        --------
            white_label (schemas.WhiteLabel): The deleted white label

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WhiteLabel
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.delete_white_label(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WhiteLabel,
                    parse_obj_as(
                        type_=WhiteLabel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_white_label_oauth_2_auth_url_white_labels_white_label_id_oauth_2_auth_url_options(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Generate the OAuth2 authorization URL by delegating to oauth2_service.

        Args:
        -----
            request: The HTTP request
            response: The HTTP response
            db: The database session
            white_label_id: The ID of the white label to get the auth URL for
            user: The current user

        Returns:
        --------
            str: The OAuth2 authorization URL

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.get_white_label_oauth_2_auth_url_white_labels_white_label_id_oauth_2_auth_url_options(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/oauth2/auth_url",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_white_label_source_connections(
        self, white_label_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SourceConnectionListItem]:
        """
        List all source connections for a specific white label.

        Args:
        -----
            white_label_id: The ID of the white label to list source connections for
            db: The database session
            current_user: The current user

        Returns:
        --------
            list[schemas.SourceConnectionListItem]: A list of source connections

        Parameters
        ----------
        white_label_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.list_white_label_source_connections(
                white_label_id="white_label_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/source-connections",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SourceConnectionListItem],
                    parse_obj_as(
                        type_=typing.List[SourceConnectionListItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def exchange_white_label_oauth_2_code_white_labels_white_label_id_oauth_2_code_options(
        self,
        white_label_id: str,
        *,
        code: str,
        source_connection_in: typing.Optional[SourceConnectionCreate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Exchange OAuth2 code for tokens and create connection with source connection.

        Args:
        -----
            request: The HTTP request
            response: The HTTP response
            white_label_id: The ID of the white label to exchange the code for
            code: The OAuth2 code
            source_connection_in: Optional source connection configuration
            db: The database session
            user: The current user
            background_tasks: Background tasks for async operations

        Returns:
        --------
            source_connection (schemas.SourceConnection): The created source connection

        Parameters
        ----------
        white_label_id : str

        code : str

        source_connection_in : typing.Optional[SourceConnectionCreate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.white_labels.exchange_white_label_oauth_2_code_white_labels_white_label_id_oauth_2_code_options(
                white_label_id="white_label_id",
                code="code",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"white-labels/{jsonable_encoder(white_label_id)}/oauth2/code",
            method="POST",
            json={
                "code": code,
                "source_connection_in": convert_and_respect_annotation_metadata(
                    object_=source_connection_in, annotation=SourceConnectionCreate, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SourceConnection,
                    parse_obj_as(
                        type_=SourceConnection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
