# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.metadata_search_filter import MetadataSearchFilter
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.search_result import SearchResult
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def search_summary(
        self,
        *,
        query: str,
        sync_id: typing.Optional[str] = None,
        request: typing.Optional[typing.Sequence[MetadataSearchFilter]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Search for summarized information.

        Parameters
        ----------
        query : str

        sync_id : typing.Optional[str]

        request : typing.Optional[typing.Sequence[MetadataSearchFilter]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.search.search_summary(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "search/summary",
            method="POST",
            params={
                "query": query,
                "sync_id": sync_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[MetadataSearchFilter], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        *,
        query: str,
        sync_id: typing.Optional[str] = None,
        request: typing.Optional[typing.Sequence[MetadataSearchFilter]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SearchResult]:
        """
        Search for a specific item.

        Args:
        ----
            db (AsyncSession): The database session.
            query (str): The query to search for.
            sync_id (Optional[UUID]): The sync ID to search for.
            metadata_filter (Optional[list[MetadataSearchFilter]]): The filter to search for.
            user (schemas.User): The user to search for.

        Returns:
        -------
            list[SearchResult]: The search results.

        Parameters
        ----------
        query : str

        sync_id : typing.Optional[str]

        request : typing.Optional[typing.Sequence[MetadataSearchFilter]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SearchResult]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.search.search(
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "search/objects",
            method="POST",
            params={
                "query": query,
                "sync_id": sync_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[MetadataSearchFilter], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SearchResult],
                    parse_obj_as(
                        type_=typing.List[SearchResult],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def search_summary(
        self,
        *,
        query: str,
        sync_id: typing.Optional[str] = None,
        request: typing.Optional[typing.Sequence[MetadataSearchFilter]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Search for summarized information.

        Parameters
        ----------
        query : str

        sync_id : typing.Optional[str]

        request : typing.Optional[typing.Sequence[MetadataSearchFilter]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.search.search_summary(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "search/summary",
            method="POST",
            params={
                "query": query,
                "sync_id": sync_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[MetadataSearchFilter], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        *,
        query: str,
        sync_id: typing.Optional[str] = None,
        request: typing.Optional[typing.Sequence[MetadataSearchFilter]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SearchResult]:
        """
        Search for a specific item.

        Args:
        ----
            db (AsyncSession): The database session.
            query (str): The query to search for.
            sync_id (Optional[UUID]): The sync ID to search for.
            metadata_filter (Optional[list[MetadataSearchFilter]]): The filter to search for.
            user (schemas.User): The user to search for.

        Returns:
        -------
            list[SearchResult]: The search results.

        Parameters
        ----------
        query : str

        sync_id : typing.Optional[str]

        request : typing.Optional[typing.Sequence[MetadataSearchFilter]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SearchResult]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.search.search(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "search/objects",
            method="POST",
            params={
                "query": query,
                "sync_id": sync_id,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[MetadataSearchFilter], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[SearchResult],
                    parse_obj_as(
                        type_=typing.List[SearchResult],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
