# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..types.response_type import ResponseType
from ..core.request_options import RequestOptions
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper


class SearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def search(
        self,
        *,
        sync_id: str,
        query: str,
        creds: str,
        response_type: typing.Optional[ResponseType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Search for documents within a specific sync.

        Args:
        -----
            db: The database session
            sync_id: The ID of the sync to search within
            query: The search query text
            response_type: Type of response (raw results or AI completion)
            user: The current user

        Returns:
        --------
            dict: A dictionary containing search results or AI completion

        Parameters
        ----------
        sync_id : str
            The ID of the sync to search within

        query : str
            Search query text

        creds : str

        response_type : typing.Optional[ResponseType]
            Type of response: raw search results or AI completion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.search.search(
            sync_id="sync_id",
            query="query",
            creds="creds",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "search/",
            method="GET",
            params={
                "sync_id": sync_id,
                "query": query,
                "response_type": response_type,
                "creds": creds,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, typing.Optional[typing.Any]],
                    parse_obj_as(
                        type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def search(
        self,
        *,
        sync_id: str,
        query: str,
        creds: str,
        response_type: typing.Optional[ResponseType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Search for documents within a specific sync.

        Args:
        -----
            db: The database session
            sync_id: The ID of the sync to search within
            query: The search query text
            response_type: Type of response (raw results or AI completion)
            user: The current user

        Returns:
        --------
            dict: A dictionary containing search results or AI completion

        Parameters
        ----------
        sync_id : str
            The ID of the sync to search within

        query : str
            Search query text

        creds : str

        response_type : typing.Optional[ResponseType]
            Type of response: raw search results or AI completion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.search.search(
                sync_id="sync_id",
                query="query",
                creds="creds",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "search/",
            method="GET",
            params={
                "sync_id": sync_id,
                "query": query,
                "response_type": response_type,
                "creds": creds,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, typing.Optional[typing.Any]],
                    parse_obj_as(
                        type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
