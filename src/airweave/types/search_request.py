# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .query_expansion_strategy import QueryExpansionStrategy
from .response_type import ResponseType


class SearchRequest(UniversalBaseModel):
    """
    Comprehensive search request encapsulating all search parameters.
    """

    query: str = pydantic.Field()
    """
    The search query text
    """

    filter: typing.Optional["Filter"] = pydantic.Field(default=None)
    """
    Qdrant native filter for metadata-based filtering
    """

    offset: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of results to skip
    """

    limit: typing.Optional[int] = pydantic.Field(default=None)
    """
    Maximum number of results to return
    """

    score_threshold: typing.Optional[float] = pydantic.Field(default=None)
    """
    Minimum similarity score threshold
    """

    summarize: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to summarize results
    """

    response_type: typing.Optional[ResponseType] = pydantic.Field(default=None)
    """
    Type of response (raw or completion)
    """

    expansion_strategy: typing.Optional[QueryExpansionStrategy] = pydantic.Field(default=None)
    """
    Query expansion strategy
    """

    include_metadata: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to include metadata in results
    """

    with_vectors: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to include vectors in response
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .filter import Filter  # noqa: E402, F401, I001
from .min_should import MinShould  # noqa: E402, F401, I001
from .nested import Nested  # noqa: E402, F401, I001
from .nested_condition import NestedCondition  # noqa: E402, F401, I001

update_forward_refs(SearchRequest)
