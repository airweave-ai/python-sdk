# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .schedule_config import ScheduleConfig


class OAuthTokenCreate(UniversalBaseModel):
    """
    Create source connection with pre-obtained OAuth tokens.
    """

    name: str
    short_name: str = pydantic.Field()
    """
    Source short_name identifier (e.g., 'slack', 'github')
    """

    readable_collection_id: str = pydantic.Field()
    """
    Collection readable ID
    """

    description: typing.Optional[str] = None
    config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Source-specific configuration
    """

    schedule: typing.Optional[ScheduleConfig] = None
    sync_immediately: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Run initial sync after creation
    """

    access_token: str = pydantic.Field()
    """
    Pre-obtained OAuth access token
    """

    refresh_token: typing.Optional[str] = pydantic.Field(default=None)
    """
    OAuth refresh token
    """

    token_expires_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Token expiration time
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
