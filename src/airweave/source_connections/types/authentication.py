# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Authentication_AuthProvider(UniversalBaseModel):
    """
    Authentication configuration
    """

    auth_method: typing.Literal["auth_provider"] = "auth_provider"
    provider_name: str
    provider_account_id: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Authentication_Direct(UniversalBaseModel):
    """
    Authentication configuration
    """

    auth_method: typing.Literal["direct"] = "direct"
    credentials: typing.Dict[str, typing.Optional[typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Authentication_OauthBrowser(UniversalBaseModel):
    """
    Authentication configuration
    """

    auth_method: typing.Literal["oauth_browser"] = "oauth_browser"
    redirect_uri: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Authentication_OauthByoc(UniversalBaseModel):
    """
    Authentication configuration
    """

    auth_method: typing.Literal["oauth_byoc"] = "oauth_byoc"
    client_id: str
    client_secret: str
    redirect_uri: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Authentication_OauthToken(UniversalBaseModel):
    """
    Authentication configuration
    """

    auth_method: typing.Literal["oauth_token"] = "oauth_token"
    access_token: str
    refresh_token: typing.Optional[str] = None
    expires_at: typing.Optional[dt.datetime] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Authentication = typing.Union[
    Authentication_AuthProvider,
    Authentication_Direct,
    Authentication_OauthBrowser,
    Authentication_OauthByoc,
    Authentication_OauthToken,
]
