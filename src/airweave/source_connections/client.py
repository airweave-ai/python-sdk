# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.source_connection import SourceConnection
from ..types.source_connection_job import SourceConnectionJob
from ..types.source_connection_list_item import SourceConnectionListItem
from .raw_client import AsyncRawSourceConnectionsClient, RawSourceConnectionsClient
from .types.authentication import Authentication
from .types.create_source_connections_post_request import CreateSourceConnectionsPostRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SourceConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSourceConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSourceConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSourceConnectionsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        collection: typing.Optional[str] = None,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionListItem]:
        """
        List source connections with minimal fields for performance.

        Parameters
        ----------
        collection : typing.Optional[str]
            Filter by collection readable ID

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.list()
        """
        _response = self._raw_client.list(
            collection=collection, skip=skip, limit=limit, request_options=request_options
        )
        return _response.data

    def create(
        self, *, request: CreateSourceConnectionsPostRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Create a new source connection.

        Accepts discriminated union types for explicit auth method specification.

        The authentication method determines the flow:
        - direct: Immediate creation with provided credentials
        - oauth_browser: Returns shell with authentication URL
        - oauth_token: Immediate creation with provided token
        - oauth_byoc: OAuth with custom client credentials
        - auth_provider: Using external auth provider

        Parameters
        ----------
        request : CreateSourceConnectionsPostRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK
        from airweave.source_connections import (
            CreateSourceConnectionsPostRequest_Direct,
        )

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.create(
            request=CreateSourceConnectionsPostRequest_Direct(
                name="name",
                short_name="short_name",
                readable_collection_id="readable_collection_id",
                credentials={"key": "value"},
            ),
        )
        """
        _response = self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    def get(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Get a source connection with optional depth expansion.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.get(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.get(source_connection_id, request_options=request_options)
        return _response.data

    def delete(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Delete a source connection and all related data.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.delete(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.delete(source_connection_id, request_options=request_options)
        return _response.data

    def run(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnectionJob:
        """
        Trigger a sync run for a source connection.

        Runs are always executed through Temporal workflow engine.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.run(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.run(source_connection_id, request_options=request_options)
        return _response.data

    def get_source_connection_jobs(
        self,
        source_connection_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionJob]:
        """
        Get sync jobs for a source connection.

        Parameters
        ----------
        source_connection_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionJob]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.get_source_connection_jobs(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.get_source_connection_jobs(
            source_connection_id, limit=limit, request_options=request_options
        )
        return _response.data

    def cancel_job(
        self, source_connection_id: str, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnectionJob:
        """
        Cancel a running sync job for a source connection.

        This will update the job status in the database to CANCELLED and
        send a cancellation request to the Temporal workflow if it's running.

        Parameters
        ----------
        source_connection_id : str

        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.cancel_job(
            source_connection_id="source_connection_id",
            job_id="job_id",
        )
        """
        _response = self._raw_client.cancel_job(source_connection_id, job_id, request_options=request_options)
        return _response.data

    def create_nested(
        self,
        *,
        short_name: str,
        name: str,
        collection_id: str,
        authentication: Authentication,
        description: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        POC: Create source connection with nested auth structure.

        This endpoint demonstrates a cleaner API structure where authentication
        is a nested discriminated union field rather than spread across the root.

        Example request body:
        ```json
        {
            "short_name": "github",
            "name": "My GitHub Connection",
            "collection_id": "...",
            "authentication": {
                "auth_method": "direct",
                "credentials": {"token": "ghp_..."}
            }
        }
        ```

        Or for OAuth:
        ```json
        {
            "short_name": "slack",
            "name": "My Slack Workspace",
            "collection_id": "...",
            "authentication": {
                "auth_method": "oauth_browser",
                "redirect_uri": "http://localhost:3000/callback"
            }
        }
        ```

        Parameters
        ----------
        short_name : str
            Source identifier

        name : str
            Connection name

        collection_id : str
            Collection ID

        authentication : Authentication
            Authentication configuration

        description : typing.Optional[str]
            Connection description

        config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK
        from airweave.source_connections import Authentication_AuthProvider

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
        )
        client.source_connections.create_nested(
            short_name="short_name",
            name="name",
            collection_id="collection_id",
            authentication=Authentication_AuthProvider(
                provider_name="provider_name",
            ),
        )
        """
        _response = self._raw_client.create_nested(
            short_name=short_name,
            name=name,
            collection_id=collection_id,
            authentication=authentication,
            description=description,
            config=config,
            request_options=request_options,
        )
        return _response.data


class AsyncSourceConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSourceConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSourceConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSourceConnectionsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        collection: typing.Optional[str] = None,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionListItem]:
        """
        List source connections with minimal fields for performance.

        Parameters
        ----------
        collection : typing.Optional[str]
            Filter by collection readable ID

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            collection=collection, skip=skip, limit=limit, request_options=request_options
        )
        return _response.data

    async def create(
        self, *, request: CreateSourceConnectionsPostRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Create a new source connection.

        Accepts discriminated union types for explicit auth method specification.

        The authentication method determines the flow:
        - direct: Immediate creation with provided credentials
        - oauth_browser: Returns shell with authentication URL
        - oauth_token: Immediate creation with provided token
        - oauth_byoc: OAuth with custom client credentials
        - auth_provider: Using external auth provider

        Parameters
        ----------
        request : CreateSourceConnectionsPostRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK
        from airweave.source_connections import (
            CreateSourceConnectionsPostRequest_Direct,
        )

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.create(
                request=CreateSourceConnectionsPostRequest_Direct(
                    name="name",
                    short_name="short_name",
                    readable_collection_id="readable_collection_id",
                    credentials={"key": "value"},
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request=request, request_options=request_options)
        return _response.data

    async def get(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Get a source connection with optional depth expansion.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.get(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(source_connection_id, request_options=request_options)
        return _response.data

    async def delete(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnection:
        """
        Delete a source connection and all related data.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.delete(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(source_connection_id, request_options=request_options)
        return _response.data

    async def run(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnectionJob:
        """
        Trigger a sync run for a source connection.

        Runs are always executed through Temporal workflow engine.

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.run(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.run(source_connection_id, request_options=request_options)
        return _response.data

    async def get_source_connection_jobs(
        self,
        source_connection_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionJob]:
        """
        Get sync jobs for a source connection.

        Parameters
        ----------
        source_connection_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionJob]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.get_source_connection_jobs(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_source_connection_jobs(
            source_connection_id, limit=limit, request_options=request_options
        )
        return _response.data

    async def cancel_job(
        self, source_connection_id: str, job_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SourceConnectionJob:
        """
        Cancel a running sync job for a source connection.

        This will update the job status in the database to CANCELLED and
        send a cancellation request to the Temporal workflow if it's running.

        Parameters
        ----------
        source_connection_id : str

        job_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.cancel_job(
                source_connection_id="source_connection_id",
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cancel_job(source_connection_id, job_id, request_options=request_options)
        return _response.data

    async def create_nested(
        self,
        *,
        short_name: str,
        name: str,
        collection_id: str,
        authentication: Authentication,
        description: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        POC: Create source connection with nested auth structure.

        This endpoint demonstrates a cleaner API structure where authentication
        is a nested discriminated union field rather than spread across the root.

        Example request body:
        ```json
        {
            "short_name": "github",
            "name": "My GitHub Connection",
            "collection_id": "...",
            "authentication": {
                "auth_method": "direct",
                "credentials": {"token": "ghp_..."}
            }
        }
        ```

        Or for OAuth:
        ```json
        {
            "short_name": "slack",
            "name": "My Slack Workspace",
            "collection_id": "...",
            "authentication": {
                "auth_method": "oauth_browser",
                "redirect_uri": "http://localhost:3000/callback"
            }
        }
        ```

        Parameters
        ----------
        short_name : str
            Source identifier

        name : str
            Connection name

        collection_id : str
            Collection ID

        authentication : Authentication
            Authentication configuration

        description : typing.Optional[str]
            Connection description

        config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK
        from airweave.source_connections import Authentication_AuthProvider

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.source_connections.create_nested(
                short_name="short_name",
                name="name",
                collection_id="collection_id",
                authentication=Authentication_AuthProvider(
                    provider_name="provider_name",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_nested(
            short_name=short_name,
            name=name,
            collection_id=collection_id,
            authentication=authentication,
            description=description,
            config=config,
            request_options=request_options,
        )
        return _response.data
