# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.connection import Connection
from ...types.http_validation_error import HTTPValidationError
from ...types.integration_type import IntegrationType


class ConnectionsClient:
    def __init__(self, *, environment: str, api_key: typing.Optional[str] = None):
        self._environment = environment
        self.api_key = api_key

    def get_connection(self, connection_id: str) -> Connection:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/detail/{connection_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_all_connected_integrations(self) -> typing.List[Connection]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "connections/list"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Connection], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_connected_integrations(self, integration_type: IntegrationType) -> typing.List[Connection]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/list/{integration_type}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Connection], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def connect_integration(
        self,
        integration_type: IntegrationType,
        short_name: str,
        *,
        name: typing.Optional[str] = None,
        config_fields: typing.Dict[str, typing.Any],
    ) -> Connection:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/connect/{integration_type}/{short_name}"),
            json=jsonable_encoder({"name": name, "config_fields": config_fields}),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_connection_credentials(self, connection_id: str) -> typing.Dict[str, typing.Any]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/credentials/{connection_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_connection(self, connection_id: str) -> Connection:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/delete/source/{connection_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def disconnect_source_connection(self, connection_id: str) -> Connection:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/disconnect/source/{connection_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def disconnect_destination_connection(self, connection_id: str) -> Connection:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/disconnect/destination/{connection_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_oauth_2_auth_url(self, *, short_name: str) -> str:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "connections/oauth2/source/auth_url"),
            params={"short_name": short_name},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_oauth_2_code(self, *, short_name: str, code: str) -> Connection:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "connections/oauth2/source/code"),
            json=jsonable_encoder({"short_name": short_name, "code": code}),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_oauth_2_white_label_code(self, white_label_id: str, *, request: str) -> Connection:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/oauth2/white-label/{white_label_id}/code"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Connection, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_oauth_2_white_label_auth_url(self, white_label_id: str) -> str:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"connections/oauth2/white-label/{white_label_id}/auth_url"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
