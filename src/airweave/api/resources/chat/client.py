# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.chat import Chat
from ...types.chat_message import ChatMessage
from ...types.http_validation_error import HTTPValidationError


class ChatClient:
    def __init__(self, *, environment: str, api_key: typing.Optional[str] = None):
        self._environment = environment
        self.api_key = api_key

    def list_chats(self, *, skip: typing.Optional[int] = None, limit: typing.Optional[int] = None) -> typing.List[Chat]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "chat/"),
            params={"skip": skip, "limit": limit},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Chat], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_chat(
        self,
        *,
        name: str,
        sync_id: str,
        description: typing.Optional[str] = None,
        model_name: typing.Optional[str] = None,
        model_settings: typing.Optional[typing.Dict[str, typing.Any]] = None,
        search_settings: typing.Optional[typing.Dict[str, typing.Any]] = None,
    ) -> Chat:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "chat/"),
            json=jsonable_encoder(
                {
                    "name": name,
                    "sync_id": sync_id,
                    "description": description,
                    "model_name": model_name,
                    "model_settings": model_settings,
                    "search_settings": search_settings,
                }
            ),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Chat, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_chat(self, chat_id: str) -> Chat:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"chat/{chat_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Chat, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_chat(
        self,
        chat_id: str,
        *,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        model_settings: typing.Optional[typing.Dict[str, typing.Any]] = None,
        search_settings: typing.Optional[typing.Dict[str, typing.Any]] = None,
    ) -> Chat:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"chat/{chat_id}"),
            json=jsonable_encoder(
                {
                    "name": name,
                    "description": description,
                    "model_settings": model_settings,
                    "search_settings": search_settings,
                }
            ),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Chat, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_chat(self, chat_id: str) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"chat/{chat_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_message(self, chat_id: str, *, content: str, role: typing.Optional[str] = None) -> ChatMessage:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"chat/{chat_id}/message"),
            json=jsonable_encoder({"content": content, "role": role}),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ChatMessage, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stream_chat_response(self, chat_id: str) -> None:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"chat/{chat_id}/stream"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
