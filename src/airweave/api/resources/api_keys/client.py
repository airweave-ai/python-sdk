# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.api_key import APIKey
from ...types.api_key_with_plain_key import APIKeyWithPlainKey
from ...types.http_validation_error import HTTPValidationError


class ApiKeysClient:
    def __init__(self, *, environment: str, api_key: typing.Optional[str] = None):
        self._environment = environment
        self.api_key = api_key

    def read_api_keys(
        self, *, skip: typing.Optional[int] = None, limit: typing.Optional[int] = None
    ) -> typing.List[APIKey]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api_keys/"),
            params={"skip": skip, "limit": limit},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[APIKey], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_api_key(self, *, expiration_date: typing.Optional[dt.datetime] = None) -> APIKeyWithPlainKey:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api_keys/"),
            json=jsonable_encoder({"expiration_date": expiration_date}),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(APIKeyWithPlainKey, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_api_key(self, *, id: str) -> APIKey:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", "api_keys/"),
            params={"id": id},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(APIKey, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_api_key(self, id: str) -> APIKey:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api_keys/{id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(APIKey, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
