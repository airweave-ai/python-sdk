# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HTTPValidationError
from ...types.sync import Sync
from ...types.sync_job import SyncJob
from .types.list_syncs_sync_get_response import ListSyncsSyncGetResponse


class SyncClient:
    def __init__(self, *, environment: str, api_key: typing.Optional[str] = None):
        self._environment = environment
        self.api_key = api_key

    def list_syncs(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        with_source_connection: typing.Optional[bool] = None,
    ) -> ListSyncsSyncGetResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "sync/"),
            params={"skip": skip, "limit": limit, "with_source_connection": with_source_connection},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListSyncsSyncGetResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_sync(
        self,
        *,
        name: str,
        description: typing.Optional[str] = None,
        source_connection_id: str,
        destination_connection_id: typing.Optional[str] = None,
        embedding_model_connection_id: typing.Optional[str] = None,
        cron_schedule: typing.Optional[str] = None,
        white_label_id: typing.Optional[str] = None,
        white_label_user_identifier: typing.Optional[str] = None,
        sync_metadata: typing.Optional[typing.Dict[str, typing.Any]] = None,
        run_immediately: typing.Optional[bool] = None,
    ) -> Sync:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "sync/"),
            json=jsonable_encoder(
                {
                    "name": name,
                    "description": description,
                    "source_connection_id": source_connection_id,
                    "destination_connection_id": destination_connection_id,
                    "embedding_model_connection_id": embedding_model_connection_id,
                    "cron_schedule": cron_schedule,
                    "white_label_id": white_label_id,
                    "white_label_user_identifier": white_label_user_identifier,
                    "sync_metadata": sync_metadata,
                    "run_immediately": run_immediately,
                }
            ),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Sync, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_sync(self, sync_id: str) -> Sync:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/{sync_id}"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Sync, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_sync(self, sync_id: str, *, delete_data: typing.Optional[bool] = None) -> Sync:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/{sync_id}"),
            params={"delete_data": delete_data},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Sync, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def run_sync(self, sync_id: str) -> SyncJob:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/{sync_id}/run"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SyncJob, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_sync_jobs(self, sync_id: str) -> typing.List[SyncJob]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/{sync_id}/jobs"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[SyncJob], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_sync_job(self, job_id: str, *, sync_id: str) -> SyncJob:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/job/{job_id}"),
            params={"sync_id": sync_id},
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SyncJob, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def subscribe_sync_job(self, job_id: str) -> typing.Any:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"sync/job/{job_id}/subscribe"),
            headers=remove_none_from_headers({"x-api-key": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HTTPValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
